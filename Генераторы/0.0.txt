Генератори

Функции – это изолированные наборы инструкций с одной точкой входа и одной точкой выхода. Другими словами, когда вы
вызываете функцию, то интерпретатор выполнит весь ее код от начала до конца при каждом вызове.

Но что, если нужно получить такой изолированный набор инструкций с несколькими точками входа? Или, если мы хотим продолжить
выполнение функции с какого-то места при следующем ее вызове?

Примером таких ситуаций может служить генератор случайных чисел, который при каждом вызове выдает новое "случайное" число
и не повторяет уже изданные. Или, когда нам нужна большая последовательность, которую можно легко вычислить, но очень
невыгодно хранить в памяти полностью.

Подобные задачи в Python решают генераторы. Один из способов создать генератор в Python – это создать особую функцию с
несколькими точками входа. Для этого используется ключевое слово  yield.

Оператор yield ведет себя схожим образом с  return, возвращающим управление потоком выполнения программой из тела функции.
Но, в отличие от  return,  yield при следующем обращении не начинает выполнение функции с самого начала, а продолжает с
места остановки функции.

Обычно такое поведение предполагает, что где-то в памяти программы должна храниться информация о том, на чем выполнение
функции остановилось и о состоянии локального пространства имен функции. 