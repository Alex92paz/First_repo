Контроль точності обчислень decimal

Комп'ютер усі обчислення робить в бінарному вигляді, а десяткові числа використовуються тільки для "спілкування" з
користувачем для зручності останнього. Через це і через те, що точність обчислень в комп'ютері обмежена, виникають
помилки округлення під час виконання математичних операцій.

Decimal — це клас у модулі decimal, який забезпечує точну арифметику з дійсними числами, вирішуючи деякі проблеми,
які виникають при використанні типу float. Він особливо корисний для точних обчислень, таких як фінансові розрахунки,
де помилки округлення можуть призвести до значних проблем.

Зверніть увагу, що ми кажемо саме до знаків після коми. Бо getcontext встановлює кількість значущих цифр.
А значущими числами можуть бути і цифри перед комою.


☝ Визначення значущих цифр:
Усі ненульові цифри є значущими: 1, 2, 3, 4, 5, 6, 7, 8, 9.
Нулі між ненульовими цифрами значущі: 102, 2005, 50009.
Провідні нулі ніколи не бувають значущими: 0.02; 001.887; 0.000515.
В числі з десятковою або без десяткової крапки знаходяться знакові нулі (праворуч від останньої ненульової цифри)
за умови, якщо вони обґрунтовані точністю їх використання: 389.000; 2.02000; 5.400; 57.5400. 

Якщо ми потребуємо саме округлення чисел, нам необхідно використовувати метод quantize. Метод quantize
використовується для встановлення точності числа Decimal, заснованої на іншому числі Decimal, яке використовується
як шаблон.

Наприклад, якщо ви хочете округлити число до двох знаків після коми, ви використовуєте Decimal об'єкт з двома нулями
після коми як шаблон.

Decimal дозволяє вибирати різні режими округлення. Згідно з офіційною документацією Python, розглянемо основні режими:

* ROUND_FLOOR число завжди округляє до найближчого меншого значення, незалежно від знаку числа.
* ROUND_CEILING число завжди округляє до найближчого більшого значення, незалежно від знаку числа.
* ROUND_HALF_DOWN числа округлюються до найближчого значення. У випадку, коли число знаходиться точно посередині між двома
можливими варіантами округлення (наприклад, 2.5, де можливі варіанти — 2 або 3), число округляється вниз, тобто до
найближчого меншого значення.
* ROUND_HALF_UP числа округлюються до найближчого значення. Проте у випадку нічиї (коли число знаходиться точно посередині
між двома варіантами), число округляється вгору, тобто до найближчого більшого значення.
* ROUND_UP число округляється від нуля. Це означає, що додатні числа округлюються до більшого, а від'ємні - до більшого за
модулем значення.
* ROUND_DOWN число округляється до нуля. Тобто додатні числа округлюються до меншого, а від'ємні - до меншого за модулем
значення.
* ROUND_HALF_EVEN числа округлюються до найближчого числа. Цей режим, також відомий як "банківське округлення", округлює
число до найближчого значення, але у випадку нічиї (коли число точно посередині між двома варіантами), воно округляється
до найближчого парного цілого числа. Наприклад, як 2.5 округлиться до 2, а 3.5 - до 4. Цей метод зменшує сукупну помилку
при серії округлень.

За замовчуванням округлення описується константою ROUND_HALF_EVEN